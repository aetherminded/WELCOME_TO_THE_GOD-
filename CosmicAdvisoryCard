// src/components/CosmicAdvisoryCard.tsx
import React from 'react';
import type { TransitHit } from '../transitEngine';

interface CosmicAdvisoryCardProps {
  forecastText: string;
  topTransits: TransitHit[];
  cosmicWeights: { finalWeights: Record<string, number>, dominantSigns: Array<{ sign: string, weight: number }>, moonPhase?: string };
  aumMeta: { fractal_dimension: number, poi_weight: number, dao_approval: number, pop_validity: boolean, dominant_sign: string, coherence: number, schumann_mod: number };
  envData: { temp: number, solar_wind: number, mag_field: number, superfund_impact: string };
}

export const CosmicAdvisoryCard: React.FC<CosmicAdvisoryCardProps> = ({ forecastText, topTransits, cosmicWeights, aumMeta, envData }) => {
  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          Cosmic Advisory
        </h2>
        <span className="text-sm text-gray-500 dark:text-gray-400">
          {new Date().toLocaleDateString()} 14:42 MDT
        </span>
      </div>
      
      <p className="text-gray-700 dark:text-gray-300 text-base leading-relaxed mb-6">
        {forecastText}
      </p>

      {topTransits.length > 0 && (
        <>
          <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3">
            Top Transits
          </h3>
          <ul className="space-y-3">
            {topTransits.map((h, index) => (
              <li key={index} className="flex items-center bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
                <span 
                  className={`w-3 h-3 rounded-full mr-3 ${
                    h.tags.includes('hard') ? 'bg-red-500' : h.tags.includes('easy') ? 'bg-green-500' : 'bg-yellow-500'
                  }`}
                ></span>
                <div className="flex-grow">
                  <p className="text-sm text-gray-800 dark:text-gray-200">
                    <strong className="font-bold">{h.transiting}</strong> {h.aspect} <strong className="font-bold">{h.natal}</strong>
                    {h.house && <span className="ml-2 text-xs text-gray-500 dark:text-gray-400">(in house {h.house})</span>}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Orb: {h.orb.toFixed(2)}° | Score: {h.score.toFixed(2)}
                  </p>
                </div>
              </li>
            ))}
          </ul>
        </>
      )}

      <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mt-6 mb-3">
        Cosmic Influences
      </h3>
      <p className="text-sm text-gray-600 dark:text-gray-400">
        Dominant Sign: <strong>{cosmicWeights.dominantSigns[0]?.sign}</strong> (Weight: {cosmicWeights.dominantSigns[0]?.weight.toFixed(3)})
      </p>
      <p className="text-sm text-gray-600 dark:text-gray-400">
        Moon Phase: <strong>{cosmicWeights.moonPhase}</strong>
      </p>

      <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mt-6 mb-3">
        AUM Blockchain Metrics
      </h3>
      <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
        <li>Fractal Dimension: {aumMeta.fractal_dimension.toFixed(3)}</li>
        <li>PoI Weight: {aumMeta.poi_weight.toFixed(3)}</li>
        <li>DAO Approval: {(aumMeta.dao_approval * 100).toFixed(1)}%</li>
        <li>PoP Validity: {aumMeta.pop_validity ? 'Valid' : 'Invalid'}</li>
        <li>Dominant Sign: {aumMeta.dominant_sign}</li>
        <li>Quantum Coherence: {aumMeta.coherence.toFixed(4)}</li>
        <li>Schumann Resonance: {aumMeta.schumann_mod.toFixed(3)}</li>
      </ul>

      <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mt-6 mb-3">
        Canon City Environmental Data
      </h3>
      <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
        <li>Temperature: {envData.temp.toFixed(1)}°C</li>
        <li>Solar Wind Speed: {envData.solar_wind.toFixed(0)} km/s</li>
        <li>Magnetic Field: {(envData.mag_field * 1e6).toFixed(1)} μT</li>
        <li>Superfund Impact: {envData.superfund_impact}</li>
      </ul>
    </div>
  );
};
